from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivymd.app import MDApp
from kivymd.uix.button import MDIconButton
from kivymd.uix.label import MDLabel
from kivymd.uix.list import MDList, OneLineListItem
from kivymd.uix.dialog import MDDialog
from kivymd.uix.button import MDRaisedButton
from kivymd.uix.textfield import MDTextField
import json

class LogList(MDList):
    pass

KV = '''
<LogList>:
    MDList:
        id: log_list

ScreenManager:
    HomeScreen:
    LogEntryScreen:

<HomeScreen>:
    name: 'home'
    
    on_enter: root.load_log_entries()  # Call load_log_entries when entering the screen
    
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: '48dp'
        
        MDIconButton:
            icon: "information"
            on_release: root.show_info_dialog()
        
        MDLabel:
            text: "JAmLogger"
            halign: "center"
        
        MDIconButton:
            icon: "plus"
            on_release: app.root.current = 'log_entry'
    
    LogList:
        id: log_list

<LogEntryScreen>:
    name: 'log_entry'
    
    BoxLayout:
        orientation: 'vertical'
        padding: 10
        spacing: 10

        MDTextField:
            id: master_key
            hint_text: "Enter master key (e.g., key1)"
        
        MDTextField:
            id: sub_key1
            hint_text: "Enter sub-key 1 (e.g., key2)"
        
        MDTextField:
            id: sub_key2
            hint_text: "Enter sub-key 2 (e.g., key3)"
        
        MDTextField:
            id: sub_key3
            hint_text: "Enter sub-key 3 (e.g., key4)"
        
        MDTextField:
            id: sub_key4
            hint_text: "Enter sub-key 4 (e.g., key5)"
        
        MDRaisedButton:
            text: "Save"
            on_release: root.save_log_entry()
        
        MDRaisedButton:
            text: "Back to Home"
            on_release: 
                app.root.current = 'home'
                root.clear_text_fields()
'''

class HomeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.info_dialog = None

    def load_log_entries(self):
        log_list = self.ids.log_list.children[0]
        log_list.clear_widgets()  # Clear existing widgets
        try:
            with open("log_data.json", "r") as f:
                data = json.load(f)
                for master_key in data.keys():
                    master_item = OneLineListItem(text=master_key)
                    log_list.add_widget(master_item)
        except FileNotFoundError:
            pass
    
    def show_info_dialog(self, *args):
        if not self.info_dialog:
            self.info_dialog = MDDialog(
                text="Hello world",
                buttons=[
                    MDRaisedButton(
                        text="Close",
                        on_release=lambda x: self.info_dialog.dismiss()
                    )
                ]
            )
        self.info_dialog.open()

class LogEntryScreen(Screen):
    def save_log_entry(self):
        master_key = self.ids.master_key.text
        sub_keys = [self.ids[f'sub_key{i}'].text for i in range(1, 5)]
        data = {}
        try:
            with open("log_data.json", "r") as f:
                data = json.load(f)
        except FileNotFoundError:
            pass
        if master_key not in data:
            data[master_key] = {}
        for i, key in enumerate(sub_keys):
            data[master_key][f'key{i+2}'] = key
        with open("log_data.json", "w") as f:
            json.dump(data, f)
        self.manager.current = 'home'
    
    def clear_text_fields(self):
        self.ids.master_key.text = ""
        for i in range(1, 5):
            self.ids[f'sub_key{i}'].text = ""

class JAmLoggerApp(MDApp):
    def build(self):
        return Builder.load_string(KV)

if __name__ == '__main__':
    JAmLoggerApp().run()

